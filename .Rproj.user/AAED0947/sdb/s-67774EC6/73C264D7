{
    "collab_server" : "",
    "contents" : "##import libraries\nlibrary(shiny)\n\nmean <- round(runif(n = 1, min = -100, max = 100), digits = 1)\nsd <- round(runif(n = 1, min = 1, max = 20), digits = 0)\nsd_bound <- signif(sort(runif(n = 2, min = -4, max = 4)), 3)\nbounds <- mean + (sd_bound * sd)\n\nnormal_plot <- function(mean, sd, lb, ub) {\n  ## finding the x and y coordinates for plotting\n  x <- seq(-4,4,length=1000)*sd + mean\n  hx <- dnorm(x,mean,sd)\n  \n  ## plot\n  plot(x, hx, type=\"n\", xlab=\"R.V\", ylab=\"\", axes=FALSE)\n\n  i <- x >= lb & x <= ub\n  lines(x, hx)\n  polygon(c(lb,x[i],ub), c(0,hx[i],0), col=rgb(1,0,0, alpha = 0.75)) \n  \n  area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)\n  mean_txt <- paste(\"Mean: \", mean)\n  sd_text <- paste(\"S.D: \", sd)\n  result <- paste(\"P(\",lb,\"< R.V <\",ub,\") =\",\n                  signif(area, digits=3), \"\\n\",mean_txt, \"\\n\", sd_text)\n  mtext(result,3)\n  axis(1, at=seq(mean - (4 * sd), mean + ( 4 * sd), sd), pos=0)\n}\n\n# mean <- round(runif(n = 1, min = -100, max = 100), digits = 1)\n# sd <- round(runif(n = 1, min = 1, max = 20), digits = 0)\n# sd_bound <- signif(sort(runif(n = 2, min = -4, max = 4)), 3)\n# bounds <- mean + (sd_bound * sd)\n\nshinyServer(function(input, output, session){\n  v <- reactiveValues(cor_inc = \"\", \n                      mean = mean, \n                      sd = sd, \n                      sd_bound = sd_bound, \n                      bounds = bounds,\n                      correct = 0,\n                      incorrect = 0,\n                      question_count = 0)\n  # v$mean <- round(runif(n = 1, min = -100, max = 100), digits = 1)\n  # v$sd <- round(runif(n = 1, min = 1, max = 20), digits = 0)\n  # v$sd_bound <- signif(sort(runif(n = 2, min = -4, max = 4)), 3)\n  # v$bounds <- v$mean + (v$sd_bound * v$sd)\n  \n  observeEvent(input$action, {\n    v$mean <- round(runif(n = 1, min = -100, max = 100), digits = 1)\n    v$sd <- round(runif(n = 1, min = 1, max = 20), digits = 0)\n    v$sd_bound <- signif(sort(runif(n = 2, min = -4, max = 4)), 3)\n    v$bounds <- v$mean + (v$sd_bound * v$sd)\n    v$cor_inc <- \"\"\n    v$question_count <- v$question_count + 1 \n  })\n  \n  observeEvent(input$answer, {\n    mean <- v$mean\n    sd <- v$sd\n    lb <- v$bounds[1]\n    ub <- v$bounds[2]\n    area <- signif(pnorm(ub, mean, sd) - pnorm(lb, mean, sd), 3)\n    if (area >= input$Prob - 0.005 & area <= input$Prob + 0.005){\n      v$cor_inc <- \"Correct!\"\n      ##v$correct <- correct + 1\n    }\n    else{\n      v$cor_inc <- \"Incorrect! Please try again\"\n      ##v$incorrect <- v$incorrect + 1\n    }\n  })\n\n  output$NormalPlot <- renderPlot(normal_plot(v$mean, v$sd, v$bounds[1], v$bounds[2]))\n  output$ci <- renderText(v$cor_inc)\n})\n",
    "created" : 1474920473902.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3729194548",
    "id" : "73C264D7",
    "lastKnownWriteTime" : 1475096477,
    "last_content_update" : 1475096477215,
    "path" : "~/Desktop/Quant apps/Normal/Normal/server.r",
    "project_path" : "server.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}